@using System.Linq.Expressions

<MudTextField @bind-Value="Password"
              Label="@Label"
              Variant="Variant.Outlined"
              Margin="Margin.Dense"
              InputType="@passwordFieldState.InputType"
              Clearable="true"
              FullWidth="true"
              Immediate="true"
              Adornment="Adornment.End"
              AdornmentIcon="@passwordFieldState.Icon"
              OnAdornmentClick="TogglePasswordVisibility" />

@code {
    private readonly PasswordFieldState passwordFieldState = new();
    private string _password = string.Empty;

    [Parameter]
    public string Label { get; set; } = "Şifre";

    [Parameter]
    public string Password
    {
        get => _password;
        set
        {
            if (_password != value)
            {
                _password = value;
                PasswordChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    [Parameter]
    public Expression<Func<string>>? ValidationExpression { get; set; }

    private void TogglePasswordVisibility()
    {
        passwordFieldState.IsVisible = !passwordFieldState.IsVisible;
        StateHasChanged();
    }

    private class PasswordFieldState
    {
        public bool IsVisible { get; set; } = true;

        public InputType InputType => IsVisible
            ? InputType.Password
            : InputType.Text;

        public string Icon => IsVisible
            ? Icons.Material.Filled.VisibilityOff
            : Icons.Material.Filled.Visibility;
    }
}